# 强制覆盖 Fork 的 main 分支，使其与上游主仓库保持 1:1 同步
# 使用说明：
# - 已默认启用：每日 UTC 02:00（北京时间 10:00）自动同步。
# - 若你在 fork 的 main 分支做了自定义修改，它们会被覆盖；请把自定义提交放在其他分支 (custom/xxx)。
# - 如果检测到 main 存在独立提交，Workflow 会跳过强制覆盖以避免误伤。
# - 想改为“安全合并”模式：注释掉 reset/force push，启用底部的合并示例。

name: Sync Upstream (Force Mirror)

on:
  schedule:
    - cron: '0 2 * * *' # 每天 UTC 02:00
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 添加 upstream 远程
        run: |
          git remote add upstream https://github.com/Ouonnki/OuonnkiTV.git || true
          git fetch --prune upstream

      - name: 检测本地 main 是否有独立提交（若有则跳过防误伤）
        id: divergence
        run: |
          git checkout main
          git fetch upstream main
          UPSTREAM_HASH=$(git rev-parse upstream/main)
          BASE=$(git merge-base main upstream/main)
          if [ "$(git rev-parse main)" != "$UPSTREAM_HASH" ] && [ "$BASE" != "$UPSTREAM_HASH" ]; then
            echo "fork 的 main 相比 upstream/main 有额外提交，将跳过强制覆盖 (创建 custom/* 分支保存你的修改)";
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: 强制对齐 upstream/main
        if: steps.divergence.outputs.skip == 'false'
        run: |
          git reset --hard upstream/main
          git push origin main --force

      - name: 跳过提示
        if: steps.divergence.outputs.skip == 'true'
        run: |
          echo "已跳过强制覆盖。请将你的自定义提交迁移到其他分支，然后重新运行本 Workflow。"

      # --- 安全合并示例（可替换上面强制覆盖步骤） ---
      # - name: 安全合并（示例，默认注释）
      #   run: |
      #     git checkout main
      #     git merge --ff-only upstream/main || git merge upstream/main --no-edit
      #     git push origin main

      - name: 完成
        run: echo "同步流程结束"
